#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
void bubble(int arr[10],int n);
void display(int arr[10],int n);
int main()
{
	int pid,status,i,n;
	printf("\n\tEnter the size of the array :");
	scanf("%d",&n);
	int arr[n];
	int arrp[n],arrc[n];
	
	for(i=0;i<n;i++)
	{
		printf("\n\tEnter the element at %d position :",(i+1));
		scanf("%d",&arr[i]);
		arrp[i]=arr[i];
		arrc[i]=arr[i];
	}
	printf("\n\tForking the child process .....");
	pid = fork();
	if(pid<0)
	{
		exit(-1);
	}
	else if(pid==0)
	{
		sleep(10);
		printf("\n\tChild Process Id's  %d ",getpid());
		bubble(arrc,n);
		printf("\n\tSorted List by child :");
      		display(arrc,n);
      		sleep(3);
      		printf("T\n\the Child has Exited ");
     		printf("\n\tIt is orphan State ");
	}
	else
	{
		bubble(arrp,n);	
		printf("\n\tThe Sorted List by Parent : ");
    		display(arrp,n);
    		printf("\n\tParent Process is %d waiting..",getpid());
     		//int status=0;
     		//wait(&status);
     		printf("\n\tParent Process completed %d with child status %d..",getpid(),status);
    		printf("\n\tThe Parent has Exited ");
	}
	return 0;
}
void bubble(int arr[10],int n)
{	
	int i,j,temp;
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
	}
}
void display(int arr[10],int n)
{
	int i,j,temp;
	for(i=0;i<n;i++)
	{
		printf(" %d",arr[i]);
	}
}
